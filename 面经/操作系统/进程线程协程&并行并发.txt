# 进程：
a = 1 b = 2 c = a + b
进程的出现是为了更好的利用CPU资源使到并发成为可能。
是执行中一段程序，即一旦程序被载入到内存中并准备执行，它就是一个进程。
进程是表示资源分配的的基本单位，又是调度运行的基本单位，是系统中的并发执行的单位。

# 线程:
set x 1
set y 2
save x @a
save y @b
load @a x
load @b y
add x y z
save z @ c
单个进程中执行中每个任务就是一个线程。线程是进程中执行运算的最小单位。
一个线程只能属于一个进程，但是一个进程可以拥有多个线程。
多线程处理就是允许一个进程中在同一时刻执行多个任务。
线程是一种轻量级的进程，与进程相比，线程给操作系统带来侧创建、维护、和管理的负担要轻，意味着线程的代价或开销比较小。
线程没有地址空间，线程包含在进程的地址空间中。线程上下文只包含一个堆栈、一个寄存器、一个优先权，线程文本包含在他的进程 的文本片段中，
进程拥有的所有资源都属于线程。所有的线程共享进程的内存和资源。
同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。
但是每个线程拥有自己的栈段， 寄存器的内容，栈段又叫运行时段，用来存放所有局部变量和临时变量。
父和子进程使用进程间通信机制，同一进程的线程通过读取和写入数据到进程变量来通信。
进程中任何线程都可以通过销毁主线程来销毁进程，销毁主线程将导致该进程的销毁，对主线程的修改可能影响所有的线程。


# 进程与线程共同点:
进程和线程都有ID/寄存器组、状态和优先权、信息块，创建后都可更改自己的属性，
都可与父进程共享资源、都不能直接访问其他无关进程或线程的资源。

# 协程：
一个程序可以包含多个协程，可以对比与一个进程包含多个线程，
因而下面我们来比较协程和线程。我们知道多个线程相对独立，
有自己的上下文，切换受系统控制；而协程也相对独立，有自己的上下文，
但是其切换由自己控制，由当前协程切换到其他协程由当前协程来控制。

# 并行：
并行就是指同一时刻有两个或两个以上的“工作单位”在同时执行，
从硬件的角度上来看就是同一时刻有两条或两条以上的指令处于执行阶段。
所以，多核是并行的前提

# 并发：
使多个操作可以在重叠的时间段内进行

# 并行与并发的关系:
并发的设计使到并发执行成为可能，而并行是并发执行的其中一种模式。

