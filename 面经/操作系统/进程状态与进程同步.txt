进程同步：
多进程虽然提高了系统资源利用率和吞吐量，
但是由于进程的异步性可能造成系统的混乱。
进程同步的任务就是对多个相关进程在执行顺序上进行协调，
使并发执行的多个进程之间可以有效的共享资源和相互合作，
保证程序执行的可再现性。

有如下几种方式：
```
计时器、信号量、事件、互斥锁
```


信号量（用于互斥）：
```
用于进程间传递信号的一个整数值。在信号量上只有三种操作可以进行：初始化，P操作(-)和V操作(+)，
这三种操作都是原子操作。P操作(-)可以用于阻塞一个进程，V操作(+)可以用于解除阻塞一个进程。
一个信号量可以初始化为非负数
semWait操作使信号量s减1.若值为负数，则执行semWait的进程被阻塞。否则进程继续执行。
semSignal操作使信号量加1，若值大于或等于零，则被semWait操作阻塞的进程被解除阻塞。
```


进程状态：
```
一个信号量可以初始化为非负数
semWait操作使信号量s减1.若值为负数，则执行semWait的进程被阻塞。否则进程继续执行。
semSignal操作使信号量加1，若值大于或等于零，则被semWait操作阻塞的进程被解除阻塞。
```

就绪→执行 调度程序选一个优先权最高的进程占有处理机；
执行→就绪 处于执行状态的进程在其执行过程中，因分配给它的一个时间片已用完而不得不让出处理机，于是进程从执行状态转变成就绪状态。'
当前运行进程时间片用完；
执行→阻塞 当前运行进程等待键盘输入，进入了睡眠状态；
正在执行的进程因等待某种事件发生而无法继续执行时，便从执行状态变成阻塞状态。
阻塞→就绪
I/O操作完成，被中断处理程序唤醒。
处于阻塞状态的进程，若其等待的事件已经发生，于是进程由阻塞状态转变为就绪状态。
