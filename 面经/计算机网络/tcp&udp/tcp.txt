# 参考阮一峰博客tcp
# http://www.ruanyifeng.com/blog/2017/06/tcp-protocol.html

# tcp与udp的区别
（1）TCP协议在传送数据段的时候要给段标号；UDP协议不
（2）TCP协议可靠；UDP协议不可靠
（3）TCP协议是面向连接；UDP协议采用无连接
（4）TCP协议负载较高，采用虚电路；UDP采用无连接
（5）TCP协议的发送方要确认接收方是否收到数据段（3次握手协议）
（6）TCP协议采用窗口技术和流控制
TCP:面向连接的、可靠的、面向字节流的、有流量控制、阻塞控制、负载较高
UDP：面向无连接的，不可靠的、面向数据报的、无流量控制、无阻塞控制、负载相对较低
面向连接（三次握手）
可靠的 （确保包不会丢失）
面向字节流的 （）
流量控制 （滑动窗口确定发送数据包的字节大小）
阻塞控制 （慢开始，阻塞避免，快重传，快恢复）

# 三次握手，四次挥手
三次握手(序列号seq, 确认号ack, syn报文)=>(客户端到服务端)
客户端发送SYN报文，置发序列号为X
服务端发送SYN+ACK报文，并置发序列号为Y，确认序列号X+1
客户端发送ACK报文，并置发序列号为Z，确认号Y+1
{
第一次握手：建立连接时，客户端A发送SYN包(SYN=j)到服务器B，并进入SYN_SEND状态，等待服务器B确认。
第二次握手：服务器B收到SYN包，必须确认客户A的SYN(ACK=j+1)，同时自己也发送一个SYN包(SYN=k)，即SYN+ACK包，此时服务器B进入SYN_RECV状态。
第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK(ACK=k+1)，此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。
}

SYN攻击
Syn攻击就是 攻击客户端 在短时间内伪造大量不存在的IP地址.严重者引起网络堵塞甚至系统瘫痪。


四次挥手(主动方和被动方均可发生挥手操作)
主动发送Fin+Ack报文，并置发序列号为X
被发送方发送ACK报文，并只发送序列号为Z，确认号X+1
被动方发送Fin+Ack报文，并只发送序列号Y，确认号为X
主动发发送ack报文，并只发送序列号X，确认号Y
{
客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送(报文段4)。
服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1(报文段5)。和SYN一样，一个FIN将占用一个序号。
服务器B关闭与客户端A的连接，发送一个FIN给客户端A(报文段6)。
客户端A发回ACK报文确认，并将确认序号设置为收到序号加1(报文段7)。
}

为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？
这是因为服务端的LISTEN状态下的SOCKET当收到SYN报文的连接请求后，
它可以把ACK和SYN(ACK起应答作用，
而SYN起同步作用)放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，
    `它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，
所以你可能未必会马上会关闭SOCKET, 也即你可能还需要发送一些数据给对方之后，
再发送FIN报文给对方来表示你同意现在可以关闭连接了，
所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。

面试必问:
三次握手建立连接时，发送方再次发送确认的必要性？
主 要是为了防止已失效的连接请求报文段突然又传到了B,因而产生错误。
假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，
而是在某些网络结点长时间滞留了，一直延迟到连接释放以后的某个时间才到达B，
本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后
，就误认为是A又发出一次 新的连接请求，于是就向A发出确认报文段，
同意建立连接。假定不采用三次握手，那么只要B发出确认，
新的连接就建立了，这样一直等待A发来数据
B的许多资源就这样白白浪费了。

常见的应用中有哪些是应用TCP协议的，哪些又是应用UDP协议的，为什么它们被如此设计？
以下应用一般或必须用udp实现？
多播的信息一定要用udp实现，因为tcp只支持一对一通信。
如果一个应用场景中大多是简短的信息，适合用udp实现，因为udp是基于报文段的，它直接对上层应用的数据封装成报文段，然后丢在网络中，如果信息量太大，会在链路层中被分片，影响传输效率。
如果一个应用场景重性能甚于重完整性和安全性，那么适合于udp，比如多媒体应用，缺一两帧不影响用户体验，但是需要流媒体到达的速度快，因此比较适合用udp
如果要求快速响应，那么udp听起来比较合适
如果又要利用udp的快速响应优点，又想可靠传输，那么只能考上层应用自己制定规则了。
常见的使用udp的例子：ICQ,QQ的聊天模块。
以qq为例的一个说明（转载自知乎）




# 阻塞机制
为什么会产生TCP的阻塞呢，其实就是发送端发送的报文速度要比接收端处理数据速率大。
TCP对于阻塞控制一共有四种算法，分别是慢开始，阻塞避免，快重传，快恢复四种算法。

由于需要考虑拥塞控制和流量控制两个方面的内容，
因此TCP的真正的发送窗口=min(rwnd, cwnd)(接受窗口, 拥塞窗口)

慢启动:(指数乘法增加到阈值)
慢启动：最初的TCP在连接建立成功后会向网络中发送大量的数据包，
这样很容易导致网络中路由器缓存空间耗尽，从而发生拥塞。因此新建立的连接不能够一开始就大量发送数据包，而只能根据网络情况逐步增加每次发送的数据量，
以避免上述现象的发生。具体来说，当新建连接时，cwnd初始化为1个最大报文段(MSS)大小，发送端开始按照拥塞窗口大小发送数据，每当有一个报文段被确认
cwnd就增加1个MSS大小。这样cwnd的值就随着网络往返时间(Round Trip Time,RTT)呈指数级增长，事实上，慢启动的速度一点也不慢，只是它的起点比较低一点而已。


阻塞避免:（到达阈值以后，加法增加）
拥塞避免：从慢启动可以看到，cwnd可以很快的增长上来，从而最大程度利用网络带宽资源，但是cwnd不能一直这样无限增长下去，一定需要某个限制。TCP使用了一个叫慢启动门限(ssthresh)的变量，当cwnd超过该值后，慢启动过程结束，进入拥塞避免阶段。对于大多数TCP实现来说，ssthresh的值是65536(同样以字节计算)。拥塞避免的主要思想是加法增大，也就是cwnd的值不再指数级往上升，开始加法增加。此时当窗口中所有的报文段都被确认时，cwnd的大小加1，cwnd的值就随着RTT开始线性增加，这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。
当 拥塞窗口 < 阈值 时，使用慢启动算法
当 拥塞窗口 > 阈值 时，使用拥塞避免算法
当 拥塞窗口 ＝ 阈值时，既可以使用慢启动算法，也可时使用拥塞避免算法。

快重传（收到三次同样的ack以后，立即发送该syn报文，并启用快恢复）

快恢复:

如果发送方设置定时器超时，那么很可能是网络出现了拥塞，
致使TCP报文段在网络中的某处被丢弃。在这种情况下
开始门限值减半，然后使用阻塞避免的增加法


# 流量控制
 为了提高信道的利用率TCP协议不使用停止等待协议，而是使用连续ARQ协议，
 意思就是可以连续发出若干个分组然后等待确认，
 而不是发送一个分组就停止并等待该分组的确认。

所谓流量控制就是让发送发送速率不要过快，让接收方来得及接收。利用滑动窗口机制就可以实施流量控制。
发送端发送的数据过多或者数据发送速率过快，知识接收端来不及处理，则会造成
数据在接收端的丢弃。
控制发送方的发送数据量以及发送速率

如何实现流量控制：可滑动窗口（零窗口，坚持定时器）
接收端可以用大小为0的窗口通知发送端停止连接上的数据流。
定时器，如果零窗口后的第一个非0窗口报文丢失，会造成接收端
和发送端互相等待，造成死锁，所以用定时器，发送端定时发送探测
报文段，接收端应答部位0，就继续定时发送，指导接收端缓存不为空。


传输效率及Nagle算法
发送发发送第一块数据块无论大小，
发送端的缓存一直积累数据，指导收到接收端发送的一个确认以后
在发送一个新的报文段。重复此操作，指导数据发送处理完毕。

